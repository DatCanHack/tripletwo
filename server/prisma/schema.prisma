generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String?
  googleId      String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  achievements  Achievement[]
  exercises     Exercise[]
  goals         Goal[]
  nutrition     NutritionLog[]
  subscriptions Subscription[]
  workouts      Workout[]

  @@map("users")
}

model Workout {
  id          String            @id @default(cuid())
  name        String
  description String?
  duration    Int?
  calories    Int?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  exercises   WorkoutExercise[]
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workouts")
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  description      String?
  category         String
  muscleGroup      String?
  equipment        String?
  instructions     Json?
  userId           String?
  isPublic         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  exerciseId String
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?
  distance   Float?
  restTime   Int?
  notes      String?
  order      Int      @default(0)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseId, order])
  @@map("workout_exercises")
}

model NutritionLog {
  id        String   @id @default(cuid())
  userId    String
  foodName  String
  calories  Int
  protein   Float?
  carbs     Float?
  fat       Float?
  quantity  Float    @default(1)
  unit      String   @default("serving")
  mealType  String
  logDate   DateTime @default(now())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nutrition_logs")
}

model Goal {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  category     String
  targetValue  Float?
  currentValue Float?    @default(0)
  unit         String?
  deadline     DateTime?
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  category    String
  points      Int      @default(0)
  icon        String?
  unlockedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  planType             String
  status               String
  startDate            DateTime  @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, status])
  @@map("subscriptions")
}
