// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workouts    Workout[]
  exercises   Exercise[]
  nutrition   NutritionLog[]
  goals       Goal[]
  achievements Achievement[]
  subscriptions Subscription[]

  @@map("users")
}

model Workout {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int?     // in minutes
  calories    Int?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises WorkoutExercise[]

  @@map("workouts")
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // strength, cardio, flexibility, etc.
  muscleGroup String?  // chest, back, legs, etc.
  equipment   String?  // dumbbells, barbell, bodyweight, etc.
  instructions Json?   // array of steps
  userId      String?  // null for system/default exercises
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?   // for cardio exercises
  distance   Float? // for running, cycling, etc.
  restTime   Int?   // rest time between sets in seconds
  notes      String?
  order      Int    @default(0) // order in workout

  // Relations
  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseId, order])
  @@map("workout_exercises")
}

model NutritionLog {
  id        String   @id @default(cuid())
  userId    String
  foodName  String
  calories  Int
  protein   Float?
  carbs     Float?
  fat       Float?
  quantity  Float    @default(1)
  unit      String   @default("serving")
  mealType  String   // breakfast, lunch, dinner, snack
  logDate   DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nutrition_logs")
}

model Goal {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  category    String    // weight_loss, muscle_gain, endurance, etc.
  targetValue Float?
  currentValue Float?   @default(0)
  unit        String?   // kg, lbs, minutes, etc.
  deadline    DateTime?
  status      String    @default("active") // active, completed, paused
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  category    String   // workout, nutrition, consistency, etc.
  points      Int      @default(0)
  icon        String?
  unlockedAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  planType  String   // free, premium, pro
  status    String   // active, cancelled, expired
  startDate DateTime @default(now())
  endDate   DateTime?
  stripeCustomerId    String?
  stripeSubscriptionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, status])
  @@map("subscriptions")
}