name: Deploy Backend (SAM)

on:
  push:
    branches: [ "main" ]
    paths:
      - "template.yaml"
      - "lambda/**"
      - "server/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  STACK_NAME: my-fitness-app-api
  # Optional: provide comma-separated lists to enable VPC for Lambda
  # Example:
  # VPC_SUBNET_IDS: subnet-aaaa,subnet-bbbb
  # VPC_SG_IDS: sg-xxxxxxxx
  VPC_SUBNET_IDS: "subnet-0dc446f73f6492723,subnet-0b6932f3c1ac24bce"
  VPC_SG_IDS: "sg-0db339984913cccf7"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS SAM CLI (pipx)
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          pipx install aws-sam-cli
      - name: Verify SAM CLI
        run: sam --version

      - name: Install dependencies (server only)
        run: |
          # Install full deps (keep esbuild in dependencies for SAM esbuild bundler)
          npm --prefix server ci
          npm --prefix server run prisma:generate

      - name: Prepare Prisma Layer (install + generate linux-arm64)
        run: |
          set -euo pipefail
          npm --prefix layers/prisma/nodejs ci
          # Generate Node-API library engine for linux-arm64 only (defined in schema)
          PRISMA_CLI_QUERY_ENGINE_TYPE=library \
          npx --prefix layers/prisma/nodejs prisma generate --schema layers/prisma/prisma/schema.prisma
          # Trim layer: keep only linux-arm64 query engine, drop extras
          PRISMA_ENG_DIR=layers/prisma/nodejs/node_modules/@prisma/engines
          find "$PRISMA_ENG_DIR" -maxdepth 1 -type f ! -name 'libquery_engine-*linux-arm64*.*' -delete || true
          rm -rf "$PRISMA_ENG_DIR"/dist "$PRISMA_ENG_DIR"/scripts || true
          find layers/prisma/nodejs/node_modules -type f \( -name '*.md' -o -name '*.map' -o -name '*.d.ts' \) -delete || true
          # Remove dev deps from layer to reduce size
          npm --prefix layers/prisma/nodejs prune --omit=dev
          du -sh layers/prisma || true

      - name: Show server folder size (debug)
        run: du -sh server || true

      - name: SAM Build
        run: sam build

      - name: SAM Deploy
        run: |
          PARAMS=""
          if [ -n "${VPC_SUBNET_IDS}" ] && [ -n "${VPC_SG_IDS}" ]; then
            PARAMS="--parameter-overrides VpcSubnetIds=${VPC_SUBNET_IDS} VpcSecurityGroupIds=${VPC_SG_IDS}"
          fi
          sam deploy \
            --stack-name "$STACK_NAME" \
            --resolve-s3 \
            --capabilities CAPABILITY_IAM \
            --region "$AWS_REGION" \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            $PARAMS

      - name: Show API URL
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text --region "$AWS_REGION")
          echo "API URL: $URL"